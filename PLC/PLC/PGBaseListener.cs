//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PG.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPGListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class PGBaseListener : IPGListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PGParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] PGParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PGParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] PGParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declarattion</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclarattion([NotNull] PGParser.DeclarattionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declarattion</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclarattion([NotNull] PGParser.DeclarattionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyExpr([NotNull] PGParser.EmptyExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyExpr([NotNull] PGParser.EmptyExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>writeExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteExpr([NotNull] PGParser.WriteExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>writeExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteExpr([NotNull] PGParser.WriteExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>readExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadExpr([NotNull] PGParser.ReadExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>readExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadExpr([NotNull] PGParser.ReadExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>comment</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComment([NotNull] PGParser.CommentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>comment</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComment([NotNull] PGParser.CommentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifCon</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfCon([NotNull] PGParser.IfConContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifCon</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfCon([NotNull] PGParser.IfConContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileLoop([NotNull] PGParser.WhileLoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileLoop([NotNull] PGParser.WhileLoopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForLoop([NotNull] PGParser.ForLoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForLoop([NotNull] PGParser.ForLoopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStat</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStat([NotNull] PGParser.BlockStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStat</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStat([NotNull] PGParser.BlockStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mulDivMod</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulDivMod([NotNull] PGParser.MulDivModContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDivMod</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulDivMod([NotNull] PGParser.MulDivModContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompare([NotNull] PGParser.CompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompare([NotNull] PGParser.CompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>uminus</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUminus([NotNull] PGParser.UminusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>uminus</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUminus([NotNull] PGParser.UminusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] PGParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] PGParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addSubConcat</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubConcat([NotNull] PGParser.AddSubConcatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addSubConcat</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubConcat([NotNull] PGParser.AddSubConcatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicOr([NotNull] PGParser.LogicOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicOr([NotNull] PGParser.LogicOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloat([NotNull] PGParser.FloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloat([NotNull] PGParser.FloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesis</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesis([NotNull] PGParser.ParenthesisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesis</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesis([NotNull] PGParser.ParenthesisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInt([NotNull] PGParser.IntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInt([NotNull] PGParser.IntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot([NotNull] PGParser.NotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot([NotNull] PGParser.NotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicAnd([NotNull] PGParser.LogicAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicAnd([NotNull] PGParser.LogicAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean([NotNull] PGParser.BooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean([NotNull] PGParser.BooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterId([NotNull] PGParser.IdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitId([NotNull] PGParser.IdContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ternary</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTernary([NotNull] PGParser.TernaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ternary</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTernary([NotNull] PGParser.TernaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign([NotNull] PGParser.AssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign([NotNull] PGParser.AssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PGParser.ptype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPtype([NotNull] PGParser.PtypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PGParser.ptype"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPtype([NotNull] PGParser.PtypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
