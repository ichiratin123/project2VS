//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PG.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PGParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IPGListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PGParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] PGParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PGParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] PGParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>declarattion</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarattion([NotNull] PGParser.DeclarattionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>declarattion</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarattion([NotNull] PGParser.DeclarattionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyExpr([NotNull] PGParser.EmptyExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyExpr([NotNull] PGParser.EmptyExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>writeExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteExpr([NotNull] PGParser.WriteExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>writeExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteExpr([NotNull] PGParser.WriteExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>readExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadExpr([NotNull] PGParser.ReadExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>readExpr</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadExpr([NotNull] PGParser.ReadExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comment</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] PGParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comment</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] PGParser.CommentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifCon</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfCon([NotNull] PGParser.IfConContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifCon</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfCon([NotNull] PGParser.IfConContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileLoop([NotNull] PGParser.WhileLoopContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileLoop([NotNull] PGParser.WhileLoopContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForLoop([NotNull] PGParser.ForLoopContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forLoop</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForLoop([NotNull] PGParser.ForLoopContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStat</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStat([NotNull] PGParser.BlockStatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStat</c>
	/// labeled alternative in <see cref="PGParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStat([NotNull] PGParser.BlockStatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mulDivMod</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDivMod([NotNull] PGParser.MulDivModContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDivMod</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDivMod([NotNull] PGParser.MulDivModContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompare([NotNull] PGParser.CompareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompare([NotNull] PGParser.CompareContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>uminus</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUminus([NotNull] PGParser.UminusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>uminus</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUminus([NotNull] PGParser.UminusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] PGParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] PGParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addSubConcat</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubConcat([NotNull] PGParser.AddSubConcatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addSubConcat</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubConcat([NotNull] PGParser.AddSubConcatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicOr([NotNull] PGParser.LogicOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicOr</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicOr([NotNull] PGParser.LogicOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] PGParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] PGParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesis</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesis([NotNull] PGParser.ParenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesis</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesis([NotNull] PGParser.ParenthesisContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] PGParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] PGParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] PGParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] PGParser.NotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicAnd([NotNull] PGParser.LogicAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicAnd</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicAnd([NotNull] PGParser.LogicAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] PGParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] PGParser.BooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] PGParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] PGParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ternary</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernary([NotNull] PGParser.TernaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ternary</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernary([NotNull] PGParser.TernaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] PGParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="PGParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] PGParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PGParser.ptype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtype([NotNull] PGParser.PtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PGParser.ptype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtype([NotNull] PGParser.PtypeContext context);
}
