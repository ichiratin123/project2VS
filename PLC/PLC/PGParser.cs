//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PG.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PGParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INT_KW=8, FLOAT_KW=9, 
		STRING_KW=10, BOOL_KW=11, WRITE_KW=12, READ_KW=13, WHILE_KW=14, FOR_KW=15, 
		IF_KW=16, ELSE_KW=17, SEMI=18, COMMA=19, MUL=20, DIV=21, ADD=22, SUB=23, 
		MOD=24, GT=25, LT=26, EQ=27, AND=28, OR=29, NOT=30, NEQ=31, CONCAT=32, 
		STRING=33, BOOL=34, ID=35, FLOAT=36, INT=37, WS=38, COMMENT=39;
	public const int
		RULE_program = 0, RULE_stat = 1, RULE_expr = 2, RULE_ptype = 3;
	public static readonly string[] ruleNames = {
		"program", "stat", "expr", "ptype"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'?'", "':'", "'='", "'int'", "'float'", 
		"'string'", "'bool'", "'write'", "'read'", "'while'", "'for'", "'if'", 
		"'else'", "';'", "','", "'*'", "'/'", "'+'", "'-'", "'%'", "'>'", "'<'", 
		"'=='", "'&&'", "'||'", "'!'", "'!='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INT_KW", "FLOAT_KW", 
		"STRING_KW", "BOOL_KW", "WRITE_KW", "READ_KW", "WHILE_KW", "FOR_KW", "IF_KW", 
		"ELSE_KW", "SEMI", "COMMA", "MUL", "DIV", "ADD", "SUB", "MOD", "GT", "LT", 
		"EQ", "AND", "OR", "NOT", "NEQ", "CONCAT", "STRING", "BOOL", "ID", "FLOAT", 
		"INT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PG.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PGParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PGParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PGParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PGParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8;
				stat();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 817126047498L) != 0) );
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteExprContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_KW() { return GetToken(PGParser.WRITE_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PGParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PGParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PGParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PGParser.SEMI, i);
		}
		public WriteExprContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitWriteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfConContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KW() { return GetToken(PGParser.IF_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_KW() { return GetToken(PGParser.ELSE_KW, 0); }
		public IfConContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterIfCon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitIfCon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileLoopContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KW() { return GetToken(PGParser.WHILE_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhileLoopContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyExprContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PGParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PGParser.SEMI, i);
		}
		public EmptyExprContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterEmptyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitEmptyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadExprContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_KW() { return GetToken(PGParser.READ_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(PGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(PGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PGParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PGParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PGParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PGParser.SEMI, i);
		}
		public ReadExprContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterReadExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitReadExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PGParser.COMMENT, 0); }
		public CommentContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForLoopContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_KW() { return GetToken(PGParser.FOR_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PGParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PGParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForLoopContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarattionContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtypeContext ptype() {
			return GetRuleContext<PtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(PGParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(PGParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PGParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PGParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PGParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PGParser.SEMI, i);
		}
		public DeclarattionContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterDeclarattion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitDeclarattion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarattion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_KW:
			case FLOAT_KW:
			case STRING_KW:
			case BOOL_KW:
				_localctx = new DeclarattionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 15;
				ptype();
				State = 16;
				Match(ID);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 17;
					Match(COMMA);
					State = 18;
					Match(ID);
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 24;
					Match(SEMI);
					}
					}
					State = 27;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMI );
				}
				break;
			case T__0:
			case SUB:
			case NOT:
			case STRING:
			case BOOL:
			case ID:
			case FLOAT:
			case INT:
				_localctx = new EmptyExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				expr(0);
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 30;
					Match(SEMI);
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMI );
				}
				break;
			case WRITE_KW:
				_localctx = new WriteExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				Match(WRITE_KW);
				State = 36;
				expr(0);
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 37;
					Match(COMMA);
					State = 38;
					expr(0);
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 44;
					Match(SEMI);
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMI );
				}
				break;
			case READ_KW:
				_localctx = new ReadExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 49;
				Match(READ_KW);
				State = 50;
				Match(ID);
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 51;
					Match(COMMA);
					State = 52;
					Match(ID);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 58;
					Match(SEMI);
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMI );
				}
				break;
			case COMMENT:
				_localctx = new CommentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				Match(COMMENT);
				}
				break;
			case IF_KW:
				_localctx = new IfConContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 64;
				Match(IF_KW);
				State = 65;
				Match(T__0);
				State = 66;
				expr(0);
				State = 67;
				Match(T__1);
				State = 68;
				stat();
				State = 71;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 69;
					Match(ELSE_KW);
					State = 70;
					stat();
					}
					break;
				}
				}
				break;
			case WHILE_KW:
				_localctx = new WhileLoopContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 73;
				Match(WHILE_KW);
				State = 74;
				Match(T__0);
				State = 75;
				expr(0);
				State = 76;
				Match(T__1);
				State = 77;
				stat();
				}
				break;
			case FOR_KW:
				_localctx = new ForLoopContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 79;
				Match(FOR_KW);
				State = 80;
				Match(T__0);
				State = 81;
				expr(0);
				State = 82;
				Match(SEMI);
				State = 83;
				expr(0);
				State = 84;
				Match(SEMI);
				State = 85;
				expr(0);
				State = 86;
				Match(T__1);
				State = 87;
				stat();
				}
				break;
			case T__2:
				_localctx = new BlockStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 89;
				Match(T__2);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 90;
					stat();
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 817126047498L) != 0) );
				State = 95;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(PGParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(PGParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(PGParser.MOD, 0); }
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PGParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PGParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(PGParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(PGParser.NEQ, 0); }
		public CompareContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UminusContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(PGParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UminusContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterUminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitUminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUminus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PGParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubConcatContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(PGParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(PGParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PGParser.CONCAT, 0); }
		public AddSubConcatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterAddSubConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitAddSubConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PGParser.OR, 0); }
		public LogicOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(PGParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PGParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PGParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicAndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PGParser.AND, 0); }
		public LogicAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(PGParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PGParser.ID, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TernaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PGParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new UminusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 100;
				Match(SUB);
				State = 101;
				expr(9);
				}
				break;
			case 2:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102;
				Match(NOT);
				State = 103;
				expr(8);
				}
				break;
			case 3:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104;
				Match(STRING);
				}
				break;
			case 4:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105;
				Match(INT);
				}
				break;
			case 5:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106;
				Match(ID);
				}
				break;
			case 6:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107;
				Match(BOOL);
				}
				break;
			case 7:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108;
				Match(FLOAT);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109;
				Match(T__0);
				State = 110;
				expr(0);
				State = 111;
				Match(T__1);
				}
				break;
			case 9:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(ID);
				State = 114;
				Match(T__6);
				State = 115;
				expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 139;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 118;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 119;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 19922944L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 120;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new AddSubConcatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 121;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 122;
						((AddSubConcatContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4307550208L) != 0)) ) {
							((AddSubConcatContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 123;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new CompareContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 125;
						((CompareContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2382364672L) != 0)) ) {
							((CompareContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126;
						expr(14);
						}
						break;
					case 4:
						{
						_localctx = new LogicAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 127;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 128;
						((LogicAndContext)_localctx).op = Match(AND);
						State = 129;
						expr(13);
						}
						break;
					case 5:
						{
						_localctx = new LogicOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 130;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 131;
						((LogicOrContext)_localctx).op = Match(OR);
						State = 132;
						expr(12);
						}
						break;
					case 6:
						{
						_localctx = new TernaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 133;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 134;
						Match(T__4);
						State = 135;
						expr(0);
						State = 136;
						Match(T__5);
						State = 137;
						expr(11);
						}
						break;
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PtypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_KW() { return GetToken(PGParser.INT_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_KW() { return GetToken(PGParser.FLOAT_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_KW() { return GetToken(PGParser.BOOL_KW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_KW() { return GetToken(PGParser.STRING_KW, 0); }
		public PtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.EnterPtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPGListener typedListener = listener as IPGListener;
			if (typedListener != null) typedListener.ExitPtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPGVisitor<TResult> typedVisitor = visitor as IPGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtypeContext ptype() {
		PtypeContext _localctx = new PtypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_ptype);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_KW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				_localctx.type = Match(INT_KW);
				}
				break;
			case FLOAT_KW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				_localctx.type = Match(FLOAT_KW);
				}
				break;
			case BOOL_KW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				_localctx.type = Match(BOOL_KW);
				}
				break;
			case STRING_KW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 147;
				_localctx.type = Match(STRING_KW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,39,151,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,4,0,10,8,0,11,0,12,0,11,
		1,0,1,0,1,1,1,1,1,1,1,1,5,1,20,8,1,10,1,12,1,23,9,1,1,1,4,1,26,8,1,11,
		1,12,1,27,1,1,1,1,4,1,32,8,1,11,1,12,1,33,1,1,1,1,1,1,1,1,5,1,40,8,1,10,
		1,12,1,43,9,1,1,1,4,1,46,8,1,11,1,12,1,47,1,1,1,1,1,1,1,1,5,1,54,8,1,10,
		1,12,1,57,9,1,1,1,4,1,60,8,1,11,1,12,1,61,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,72,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,4,1,92,8,1,11,1,12,1,93,1,1,1,1,3,1,98,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,117,8,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,5,2,140,8,2,10,2,12,2,143,9,2,1,3,1,3,1,3,1,3,3,3,149,8,3,
		1,3,0,1,4,4,0,2,4,6,0,3,2,0,20,21,24,24,2,0,22,23,32,32,2,0,25,27,31,31,
		181,0,9,1,0,0,0,2,97,1,0,0,0,4,116,1,0,0,0,6,148,1,0,0,0,8,10,3,2,1,0,
		9,8,1,0,0,0,10,11,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,13,1,0,0,0,13,
		14,5,0,0,1,14,1,1,0,0,0,15,16,3,6,3,0,16,21,5,35,0,0,17,18,5,19,0,0,18,
		20,5,35,0,0,19,17,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,
		25,1,0,0,0,23,21,1,0,0,0,24,26,5,18,0,0,25,24,1,0,0,0,26,27,1,0,0,0,27,
		25,1,0,0,0,27,28,1,0,0,0,28,98,1,0,0,0,29,31,3,4,2,0,30,32,5,18,0,0,31,
		30,1,0,0,0,32,33,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,98,1,0,0,0,35,
		36,5,12,0,0,36,41,3,4,2,0,37,38,5,19,0,0,38,40,3,4,2,0,39,37,1,0,0,0,40,
		43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,44,
		46,5,18,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
		98,1,0,0,0,49,50,5,13,0,0,50,55,5,35,0,0,51,52,5,19,0,0,52,54,5,35,0,0,
		53,51,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,59,1,0,0,0,
		57,55,1,0,0,0,58,60,5,18,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,
		61,62,1,0,0,0,62,98,1,0,0,0,63,98,5,39,0,0,64,65,5,16,0,0,65,66,5,1,0,
		0,66,67,3,4,2,0,67,68,5,2,0,0,68,71,3,2,1,0,69,70,5,17,0,0,70,72,3,2,1,
		0,71,69,1,0,0,0,71,72,1,0,0,0,72,98,1,0,0,0,73,74,5,14,0,0,74,75,5,1,0,
		0,75,76,3,4,2,0,76,77,5,2,0,0,77,78,3,2,1,0,78,98,1,0,0,0,79,80,5,15,0,
		0,80,81,5,1,0,0,81,82,3,4,2,0,82,83,5,18,0,0,83,84,3,4,2,0,84,85,5,18,
		0,0,85,86,3,4,2,0,86,87,5,2,0,0,87,88,3,2,1,0,88,98,1,0,0,0,89,91,5,3,
		0,0,90,92,3,2,1,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,
		0,0,94,95,1,0,0,0,95,96,5,4,0,0,96,98,1,0,0,0,97,15,1,0,0,0,97,29,1,0,
		0,0,97,35,1,0,0,0,97,49,1,0,0,0,97,63,1,0,0,0,97,64,1,0,0,0,97,73,1,0,
		0,0,97,79,1,0,0,0,97,89,1,0,0,0,98,3,1,0,0,0,99,100,6,2,-1,0,100,101,5,
		23,0,0,101,117,3,4,2,9,102,103,5,30,0,0,103,117,3,4,2,8,104,117,5,33,0,
		0,105,117,5,37,0,0,106,117,5,35,0,0,107,117,5,34,0,0,108,117,5,36,0,0,
		109,110,5,1,0,0,110,111,3,4,2,0,111,112,5,2,0,0,112,117,1,0,0,0,113,114,
		5,35,0,0,114,115,5,7,0,0,115,117,3,4,2,1,116,99,1,0,0,0,116,102,1,0,0,
		0,116,104,1,0,0,0,116,105,1,0,0,0,116,106,1,0,0,0,116,107,1,0,0,0,116,
		108,1,0,0,0,116,109,1,0,0,0,116,113,1,0,0,0,117,141,1,0,0,0,118,119,10,
		15,0,0,119,120,7,0,0,0,120,140,3,4,2,16,121,122,10,14,0,0,122,123,7,1,
		0,0,123,140,3,4,2,15,124,125,10,13,0,0,125,126,7,2,0,0,126,140,3,4,2,14,
		127,128,10,12,0,0,128,129,5,28,0,0,129,140,3,4,2,13,130,131,10,11,0,0,
		131,132,5,29,0,0,132,140,3,4,2,12,133,134,10,10,0,0,134,135,5,5,0,0,135,
		136,3,4,2,0,136,137,5,6,0,0,137,138,3,4,2,11,138,140,1,0,0,0,139,118,1,
		0,0,0,139,121,1,0,0,0,139,124,1,0,0,0,139,127,1,0,0,0,139,130,1,0,0,0,
		139,133,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,5,
		1,0,0,0,143,141,1,0,0,0,144,149,5,8,0,0,145,149,5,9,0,0,146,149,5,11,0,
		0,147,149,5,10,0,0,148,144,1,0,0,0,148,145,1,0,0,0,148,146,1,0,0,0,148,
		147,1,0,0,0,149,7,1,0,0,0,15,11,21,27,33,41,47,55,61,71,93,97,116,139,
		141,148
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
